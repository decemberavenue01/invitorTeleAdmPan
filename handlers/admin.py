import os
import json
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    InputFile
)
from aiogram.filters import Command
from aiogram import Bot
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
ADMINS = list(map(int, os.getenv("ADMINS", "").split(",")))

router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Command("broadcast"))
async def start_broadcast(message: Message, bot: Bot):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù HTML", callback_data="format_html")],
        [InlineKeyboardButton(text="üî§ Markdown", callback_data="format_markdown")]
    ])
    await message.answer("üìå –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:", reply_markup=keyboard)

# –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
@router.callback_query(F.data.startswith("format_"))
async def choose_format(callback: CallbackQuery, bot: Bot):
    fmt = callback.data.split("_")[1]
    await bot.session.storage.set_data(user=callback.from_user.id, data={
        "step": "awaiting_text",
        "parse_mode": fmt
    })
    await callback.message.edit_text("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message()
async def handle_broadcast_steps(message: Message, bot: Bot):
    user_id = message.from_user.id
    if not is_admin(user_id):
        return

    state = await bot.session.storage.get_data(user=user_id)
    if not state or "step" not in state:
        return

    step = state["step"]

    # –®–∞–≥ 1 ‚Äî –¢–µ–∫—Å—Ç
    if step == "awaiting_text":
        await bot.session.storage.set_data(user=user_id, data={
            "step": "awaiting_media",
            "text": message.html_text,
            "parse_mode": state.get("parse_mode", "html")
        })
        return await message.answer("üìé –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å `–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å`)")

    # –®–∞–≥ 2 ‚Äî –ú–µ–¥–∏–∞
    elif step == "awaiting_media":
        data = await bot.session.storage.get_data(user=user_id)
        text = data.get("text")
        parse_mode = data.get("parse_mode", "html")

        media_id = None
        media_type = None

        if message.photo:
            media_id = message.photo[-1].file_id
            media_type = "photo"
        elif message.video_note:
            media_id = message.video_note.file_id
            media_type = "video_note"
        elif message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            media_type = "none"

        await bot.session.storage.set_data(user=user_id, data={
            "step": "awaiting_button",
            "text": text,
            "media_id": media_id,
            "media_type": media_type,
            "parse_mode": parse_mode
        })

        return await message.answer("üîò –ü—Ä–∏—à–ª–∏ –∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - https://example.com`\n\n–ò–ª–∏ `–Ω–µ—Ç` –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞", parse_mode="Markdown")

    # –®–∞–≥ 3 ‚Äî –ö–Ω–æ–ø–∫–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞
    elif step == "awaiting_button":
        data = await bot.session.storage.get_data(user=user_id)
        text = data.get("text")
        media_id = data.get("media_id")
        media_type = data.get("media_type")
        parse_mode = data.get("parse_mode", "html").upper()

        button = None
        if "-" in message.text and "http" in message.text:
            parts = message.text.split("-", 1)
            btn_text = parts[0].strip()
            btn_url = parts[1].strip()
            button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=btn_text, url=btn_url)]
            ])

        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        USER_FILE = "data/users.json"
        try:
            with open(USER_FILE, "r") as f:
                users = json.load(f)
        except:
            users = []

        success = 0
        fail = 0

        for uid in users:
            try:
                if media_type == "photo":
                    await bot.send_photo(uid, photo=media_id, caption=text, reply_markup=button, parse_mode=parse_mode)
                elif media_type == "video_note":
                    await bot.send_video_note(uid, video_note=media_id)
                    await bot.send_message(uid, text, reply_markup=button, parse_mode=parse_mode)
                else:
                    await bot.send_message(uid, text, reply_markup=button, parse_mode=parse_mode)

                success += 1
            except:
                fail += 1

        await message.answer(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")
        await bot.session.storage.set_data(user=user_id, data={})

from aiogram import Router, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from data import admin_ids, approved_users, admin_notifications

router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id not in admin_ids:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")],
        [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ" if admin_notifications.get(message.from_user.id, True)
                              else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–´–ö–õ", callback_data="toggle_notify")]
    ])
    await message.answer("üëÆ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)


@router.callback_query(F.data == "toggle_notify")
async def toggle_notifications(callback):
    admin_id = callback.from_user.id
    current = admin_notifications.get(admin_id, True)
    admin_notifications[admin_id] = not current
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if not current else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–ö–õ' if not current else '–í–´–ö–õ'}",
                              callback_data="toggle_notify")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")]
    ]))
    await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}.")

# –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == "broadcast")
async def start_broadcast(callback):
    await callback.message.answer(
        "üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ: —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å, —Ç–µ–∫—Å—Ç, –∫—Ä—É–∂–æ–∫, HTML/Markdown, –∫–Ω–æ–ø–∫–∏)"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(F.content_type.in_({"text", "photo", "video_note"}))
async def broadcast_handler(message: Message):
    if message.from_user.id not in admin_ids:
        return

    sent_count = 0
    for user_id in approved_users:
        try:
            if message.photo:
                photo = message.photo[-1].file_id
                await message.bot.send_photo(chat_id=user_id,
                                             photo=photo,
                                             caption=message.caption,
                                             parse_mode=ParseMode.HTML)
            elif message.video_note:
                await message.bot.send_video_note(chat_id=user_id,
                                                  video_note=message.video_note.file_id)
            else:
                await message.bot.send_message(chat_id=user_id,
                                               text=message.text,
                                               parse_mode=ParseMode.HTML)
            sent_count += 1
        except Exception:
            continue

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

from aiogram import Router, F, Bot
from aiogram.types import (
    ChatJoinRequest, Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.types.input_file import FSInputFile
from urllib.parse import quote
import asyncio
from data import approved_users

router = Router()

# –ò–º—è –±–æ—Ç–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
BOT_USERNAME = "invitorTeleAdmPan_bot"          # –ë–µ–∑ @
OWNER_USERNAME = "davidavidavidavidavidavidavid"  # üîÅ –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π Telegram username –±–µ–∑ @

# –ö–Ω–æ–ø–∫–∞ "–£–ó–ù–ê–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢" —Å callback_data
def learn_more_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–£–ó–ù–ê–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢",
                callback_data=f"check_result:{user_id}"
            )]
        ]
    )

# –ö–Ω–æ–ø–∫–∞ "–ü–û–õ–£–ß–ò–¢–¨ –ë–û–ù–£–°" ‚Äî deep link –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å –∞–≤—Ç–æ—Ç–µ–∫—Å—Ç–æ–º
def get_bonus_kb() -> InlineKeyboardMarkup:
    text = "–ü—Ä–∏–≤–µ—Ç, –ø–∏—à—É –ø–æ –ø–æ–≤–æ–¥—É –±–æ–Ω—É—Å–∞"
    encoded_text = quote(text)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü–û–õ–£–ß–ò–¢–¨ –ë–û–ù–£–°",
                url=f"https://t.me/davidavidavidavidavidavidavid?text={encoded_text}"
            )]
        ]
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
@router.chat_join_request()
async def handle_join_request(join_request: ChatJoinRequest, bot: Bot):
    user_id = join_request.from_user.id
    chat_id = join_request.chat.id

    # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
    await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    approved_users.add(user_id)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    photo = FSInputFile("media/welcome.jpg")
    await bot.send_photo(
        chat_id=user_id,
        photo=photo,
        caption="–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª!\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
        reply_markup=learn_more_kb(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–∫–∏ "–£–ó–ù–ê–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢"
@router.callback_query(F.data.startswith("check_result:"))
async def handle_check_result(callback: CallbackQuery, bot: Bot):
    user_id = int(callback.data.split(":")[1])

    try:
        photo = FSInputFile("media/welcome2.jpg")
        await bot.send_photo(
            chat_id=callback.from_user.id,
            photo=photo,
            caption="–£ –º–µ–Ω—è –¥–ª—è —Ç–µ–±—è –µ—Å—Ç—å –ë–û–ù–£–°, –∫–æ—Ç–æ—Ä—ã–π...",
            reply_markup=get_bonus_kb()
        )

        await asyncio.sleep(60)
        await bot.send_message(callback.from_user.id, "üîï –ù–µ –æ—Ç–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–æ–Ω—É—Å–∞: {e}")

    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç "—á–∞—Å–∏–∫–∏"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(F.text.startswith("/start"))
async def handle_start(message: Message, bot: Bot):
    args = message.text.split()

    if len(args) > 1:
        param = args[1]

        if param == "bonus":
            await message.answer("üéÅ –í–æ—Ç —Ç–≤–æ–π –±–æ–Ω—É—Å!")
        else:
            await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞.")
    else:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

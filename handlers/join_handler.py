from aiogram import Router, F, Bot
from aiogram.types import (
    ChatJoinRequest, Message, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.types.input_file import FSInputFile
from urllib.parse import quote
import asyncio
from data import approved_users
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

# –ò–º—è –±–æ—Ç–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
BOT_USERNAME = "invitorTeleAdmPan_bot"          # –ë–µ–∑ @
OWNER_USERNAME = "davidavidavidavidavidavidavid"             # üîÅ –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π Telegram username –±–µ–∑ @

# –°—Å—ã–ª–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º user_id
def get_deep_link(user_id: int) -> str:
    return f"https://t.me/{BOT_USERNAME}?start={user_id}"

# –ö–Ω–æ–ø–∫–∞ "–£–ó–ù–ê–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢" (–≤–µ–¥—ë—Ç –∫ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º user_id)
def learn_more_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–£–ó–ù–ê–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢",
                url=get_deep_link(user_id)
            )]
        ]
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–û–õ–£–ß–ò–¢–¨ –ë–û–ù–£–°" —Å–æ —Å—Å—ã–ª–∫–æ–π –≤ –ª–∏—á–∫—É –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –∏ –∞–≤—Ç–æ—Ç–µ–∫—Å—Ç–æ–º
def bonus_kb_with_prefill():
    text = "–ü—Ä–∏–≤–µ—Ç, –ø–∏—à—É –ø–æ –ø–æ–≤–æ–¥—É –±–æ–Ω—É—Å–∞"
    encoded_text = quote(text)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü–û–õ–£–ß–ò–¢–¨ –ë–û–ù–£–°",
                url=f"https://t.me/davidavidavidavidavidavidavid?text={encoded_text}"
            )]
        ]
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
@router.chat_join_request()
async def handle_join_request(join_request: ChatJoinRequest, bot: Bot):
    user_id = join_request.from_user.id
    chat_id = join_request.chat.id

    # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
    await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    approved_users.add(user_id)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    photo = FSInputFile("media/welcome.jpg")
    await bot.send_photo(
        chat_id=user_id,
        photo=photo,
        caption="–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª!\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
        reply_markup=learn_more_kb(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
@router.message(F.text.startswith("/start"))
async def handle_start(message: Message, bot: Bot):
    args = message.text.split()

    if len(args) > 1:
        param = args[1]

        if param == "bonus":
            await message.answer("üéÅ –í–æ—Ç —Ç–≤–æ–π –±–æ–Ω—É—Å!")
        else:
            try:
                photo = FSInputFile("media/welcome2.jpg")
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="–£ –º–µ–Ω—è –¥–ª—è —Ç–µ–±—è –µ—Å—Ç—å –ë–û–ù–£–°, –∫–æ—Ç–æ—Ä—ã–π...",
                    reply_markup=bonus_kb_with_prefill()
                )

                await asyncio.sleep(30)
                await bot.send_message(message.chat.id, "üîï –ù–µ –æ—Ç–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–æ–Ω—É—Å–∞: {e}")
    else:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
